AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Local API and Lambda setup for testing


Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,X-Requested-With'"
      AllowOrigin: "'http://localhost:3001'"
      AllowCredentials: true
  Function:
    Environment:
      Variables:
        DB_HOST: "task_management_db"
        DB_NAME: "tasks-db"
        DB_USER: "postgres"
        DB_PASSWORD: "password"
        DB_PORT: "5432"
        JWT_SECRET: "K8pEr3Vx7Qz9JyB2sT5nM4cF1hG6aD0wL3iR8oUv"
      
Resources:
  LocalPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: LocalPythonLayer
      Description: Local Python layer for testing
      ContentUri: ../../WebApp/backend/lib/python.zip
      CompatibleRuntimes:
        - python3.12
      LicenseInfo: MIT
  
  LocalLambdaCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: LocalLambdaCommonLayer
      Description: Utility functions for local Lambda testing
      ContentUri: ../../WebApp/backend/commonUtil_layer.zip
      CompatibleRuntimes:
        - python3.12
      LicenseInfo: MIT
    
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../WebApp/backend/handlers/auth
      Handler: login.lambda_handler
      Timeout: 500
      Runtime: python3.12
      Layers:
        - !Ref LocalPythonLayer
        - !Ref LocalLambdaCommonLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /task-management/login
            Method: POST
    Metadata:
      SamResourceId: LoginFunction

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../WebApp/backend/handlers/tasks
      Handler: create_task.lambda_handler
      Timeout: 500
      Runtime: python3.12
      Layers:
        - !Ref LocalPythonLayer
        - !Ref LocalLambdaCommonLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /task-management/tasks
            Method: POST
    Metadata:
      SamResourceId: CreateTaskFunction
    
  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../WebApp/backend/handlers/tasks
      Handler: get_tasks.lambda_handler
      Timeout: 500
      Runtime: python3.12
      Layers:
        - !Ref LocalPythonLayer
        - !Ref LocalLambdaCommonLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /task-management/tasks
            Method: GET
    Metadata:
      SamResourceId: GetTasksFunction

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../WebApp/backend/handlers/tasks
      Handler: delete_task.lambda_handler
      Timeout: 500
      Runtime: python3.12
      Layers:
        - !Ref LocalPythonLayer
        - !Ref LocalLambdaCommonLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /task-management/tasks/{task_id}
            Method: DELETE
    Metadata:
      SamResourceId: DeleteTaskFunction

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../WebApp/backend/handlers/tasks
      Handler: update_task.lambda_handler
      Timeout: 500
      Runtime: python3.12
      Layers:
        - !Ref LocalPythonLayer
        - !Ref LocalLambdaCommonLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /task-management/tasks/{task_id}
            Method: PATCH
    Metadata:
      SamResourceId: UpdateTaskFunction